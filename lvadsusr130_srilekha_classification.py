# -*- coding: utf-8 -*-
"""lvadsusr130_srilekha_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_nuKvW3uD-IcU6EMgBPAnpVm6fTGCMGm
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
df2 = pd.read_csv('penguins_classification.csv')
numerical_columns = ['bill_length_mm','bill_depth_mm','flipper_length_mm','body_mass_g','year']
imputer = SimpleImputer(strategy='median')
df2[numerical_columns] = imputer.fit_transform(df2[numerical_columns])

le = LabelEncoder()
cat_columns = ['species', 'island']
for c in cat_columns:
    df2[c]= le.fit_transform(df2[c])
columns_outlier = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
threshold = 3
df2_cleaned = df2[np.all(np.abs((df2[columns_outlier] - df2[columns_outlier].mean()) / df2[columns_outlier].std()) < threshold, axis=1)]
print(df2_cleaned.describe())

correlation_matrix = df2_cleaned.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

m= df2_cleaned.drop(['species'], axis=1)
n= df2_cleaned['species']
m_train, m_test, n_train, n_test = train_test_split(m, n, test_size=0.2, random_state=44)
scaler = StandardScaler()
m_train_scaled = scaler.fit_transform(m_train)
n_test_scaled = scaler.transform(m_test)

ranf_classifier = RandomForestClassifier(n_estimators=100, random_state=44)
ranf_classifier.fit(m_train_scaled, n_train)
n_prediction= ranf_classifier.predict(n_test_scaled)
print(classification_report(n_test, n_prediction))

confuse_matrix = confusion_matrix(n_test, n_prediction)
sns.heatmap(confuse_matrix, annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()